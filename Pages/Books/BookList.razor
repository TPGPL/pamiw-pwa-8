@page "/books"
@inject IBookService service
@inject NavigationManager manager
@inject AuthState authState
@inject IStringLocalizer<Resources.AppResources> Loc

<PageTitle>[PAMIW] @Loc["BooksHeader"]</PageTitle>

    <h1>@Loc["BooksHeader"]</h1>

@if (books is null)
{
    <p>@message</p>
}
else if (!books.Any())
{
    <p>@Loc["NoData"]</p>
}
else
{
    <button class="btn btn-primary" @onclick="CreateAction">@Loc["CreateBookButton"]</button>
    <table class="table table-striped align-middle">
        <thead>
            <tr>
                <th>ID</th>
                <th>@Loc["BookTitle"]</th>
                <th>@Loc["BookAuthor"]</th>
                <th>@Loc["BookPublisher"]</th>
                <th>@Loc["BookPageCount"]</th>
                <th>@Loc["BookDate"]</th>
                <th>@Loc["BookISBN"]</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <th scope="row">@book.Id</th>
                    <td>@book.Title</td>
                    <td>@book.AuthorID</td>
                    <td>@book.PublisherID</td>
                    <td>@book.PageCount</td>
                    <td>@book.ReleaseDate.ToShortDateString()</td>
                    <td>@book.ISBN</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditAction(book.Id)">@Loc["UpdateButton"]</button>
                        <button class="btn btn-danger" @onclick="() => DeleteAction(book.Id)">@Loc["DeleteButton"]</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <ul class="pagination">
        <li class="page-item">
            <button class="page-link" @onclick="PreviousPage">@Loc["PrevButton"]</button>
        </li>
        <li class="page-item active">
            <span class="page-link">@currentPage</span>
        </li>
        <li class="page-item">
            <button class="page-link" @onclick="NextPage">@Loc["NextButton"]</button>
        </li>
    </ul>
}

@code {
    private List<Book>? books;
    private readonly int dataPerPage = 10;
    private int currentPage = 1;
    private int totalPages;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        message = Loc["LoadingLabel"];
        if (!await authState.TryAuthenticateAsync())
        {
            manager.NavigateTo("/login");
        }

        books = await GetBooksAsync();
    }

    protected async Task<List<Book>?> GetBooksAsync()
    {
        var response = await service.GetBooksAsync();

        if (!response.Success)
        {
            message = response.Message;
            return null;
        }

        var data = response.Data;

        if (data is null || !data.Any())
        {
            return data;
        }

        totalPages = (data.Count / dataPerPage) + 1;

        if (data.Count % dataPerPage == 0)
        {
            totalPages--;
        }

        while (currentPage > totalPages)
        {
            currentPage--;
        }

        int dataToFetch = currentPage == totalPages && data.Count % dataPerPage != 0 ? data.Count % dataPerPage : dataPerPage;

        return data.GetRange((currentPage - 1) * dataPerPage, dataToFetch);
    }

    protected void CreateAction()
    {
        manager.NavigateTo($"/books/create");
    }

    protected void EditAction(int id)
    {
        manager.NavigateTo($"/books/{id}");
    }

    protected async Task DeleteAction(int id)
    {
        await service.DeleteBookAsync(id);

        books = await GetBooksAsync();
    }

    protected async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;

            books = await GetBooksAsync();
        }
    }
    protected async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;

            books = await GetBooksAsync();
        }
    }
}
