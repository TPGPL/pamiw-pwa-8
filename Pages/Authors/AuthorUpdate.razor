@page "/authors/{Id:int}"
@inject IAuthorService service
@inject NavigationManager manager
@inject AuthState authState
@inject IStringLocalizer<Resources.AppResources> Loc

<PageTitle>[PAMIW] @Loc["EditAuthorHeader"]</PageTitle>

    <h1>@Loc["EditAuthorHeader"]</h1>

@if (author is null)
{
    <p>@message</p>
}
else
{
    if (updateMessage is not null)
    {
        <p class="alert alert-danger">@Loc["ErrorLabel"] @updateMessage</p>
    }

    <AuthorForm author="author" OnValidSubmit="HandleSubmit" />
}

@code {
    [Parameter]
    public int Id { get; set; }
    private Author? author;
    private String? message;
    private String? updateMessage;

    protected override async Task OnInitializedAsync()
    {
        message = Loc["LoadingLabel"];

        if (!await authState.TryAuthenticateAsync())
        {
            manager.NavigateTo("/login");
        }

        var response = await service.GetAuthorAsync(Id);

        if (!response.Success)
        {
            message = response.Message;
            return;
        }

        author = response.Data;
    }

    public async Task HandleSubmit()
    {
        if (author is null)
        {
            return;
        }

        var response = await service.UpdateAuthorAsync(Id, author);

        if (!response.Success)
        {
            updateMessage = response.Message;
            return;
        }

        manager.NavigateTo("/authors");
    }
}
